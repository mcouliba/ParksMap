apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: mlbparks-mitzicom
objects:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APPLICATION_NAME}-mongodb
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    generation: "1"
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: "1"
    revisionHistoryLimit: "10"
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      activeDeadlineSeconds: "21600"
      resources: {}
      rollingParams:
        intervalSeconds: "1"
        maxSurge: 25%
        maxUnavailable: 25%
        post:
          execNewPod:
            command:
            - curl
            - http://${APPLICATION_NAME}:8080/ws/data/load
            containerName: ${APPLICATION_NAME}
          failurePolicy: Abort
        timeoutSeconds: "600"
        updatePeriodSeconds: "1"
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: DB_HOST
            valueFrom:
              configMapKeyRef:
                key: db.host
                name: ${APPLICATION_NAME}-config
          - name: DB_PORT
            valueFrom:
              configMapKeyRef:
                key: db.port
                name: ${APPLICATION_NAME}-config
          - name: DB_USERNAME
            valueFrom:
              configMapKeyRef:
                key: db.username
                name: ${APPLICATION_NAME}-config
          - name: DB_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: db.password
                name: ${APPLICATION_NAME}-config
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                key: db.name
                name: ${APPLICATION_NAME}-config
          image: ' '
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: "3"
            httpGet:
              path: /ws/info
              port: 8080
              scheme: HTTP
            periodSeconds: "10"
            successThreshold: "1"
            timeoutSeconds: "120"
          name: ${APPLICATION_NAME}
          readinessProbe:
            failureThreshold: "3"
            httpGet:
              path: /ws/healthz
              port: 8080
              scheme: HTTP
            periodSeconds: "10"
            successThreshold: "1"
            timeoutSeconds: "120"
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: "30"
    test: false
    triggers:
    - imageChangeParams:
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:${IMAGE_TAG}
          namespace: mitzicom-dev
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      template.alpha.openshift.io/wait-for-ready: "true"
    creationTimestamp: null
    generation: "1"
    labels:
      app: ${APPLICATION_NAME}
      template: mongodb-persistent-template
    name: ${APPLICATION_NAME}-mongodb
  spec:
    replicas: "1"
    revisionHistoryLimit: "10"
    selector:
      name: ${APPLICATION_NAME}-mongodb
    strategy:
      activeDeadlineSeconds: "21600"
      recreateParams:
        timeoutSeconds: "600"
      resources: {}
      type: Recreate
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}-mongodb
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${APPLICATION_NAME}-mongodb
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${APPLICATION_NAME}-mongodb
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${APPLICATION_NAME}-mongodb
          - name: MONGODB_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${APPLICATION_NAME}-mongodb
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: "3"
            initialDelaySeconds: "30"
            periodSeconds: "10"
            successThreshold: "1"
            tcpSocket:
              port: 27017
            timeoutSeconds: "1"
          name: mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: "3"
            initialDelaySeconds: "3"
            periodSeconds: "10"
            successThreshold: "1"
            timeoutSeconds: "1"
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: ${APPLICATION_NAME}-mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: "30"
        volumes:
        - name: ${APPLICATION_NAME}-mongodb-data
          persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-mongodb
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: "0"
    latestVersion: "0"
    observedGeneration: "0"
    replicas: "0"
    unavailableReplicas: "0"
    updatedReplicas: "0"
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      template.openshift.io/expose-uri: mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
      template: mongodb-persistent-template
    name: ${APPLICATION_NAME}-mongodb
  spec:
    ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      name: ${APPLICATION_NAME}-mongodb
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  data:
    db.host: ${APPLICATION_NAME}-mongodb
    db.name: ${MONGODB_DATABASE}
    db.password: ${MONGODB_PASSWORD}
    db.port: "27017"
    db.username: ${MONGODB_USER}
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-config
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-admin_password: '{.data[''database-admin-password'']}'
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: ${APPLICATION_NAME}-mongodb
  stringData:
    database-admin-password: ${MONGODB_ADMIN_PASSWORD}
    database-name: ${MONGODB_DATABASE}
    database-password: ${MONGODB_PASSWORD}
    database-user: ${MONGODB_USER}
parameters:
- description: The name for the application
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: ${APPLICATION_NAME}
- description:  the image tag for deployment (latest, TestReady, ProdReady).
  displayName: Image tag
  name: IMAGE_TAG
  required: true
  value: "latest"
- description: Username for MongoDB user that will be used for accessing the database.
  displayName: MongoDB Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: MONGODB_USER
  required: true
- description: Password for the MongoDB connection user.
  displayName: MongoDB Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MONGODB_PASSWORD
  required: true
- description: Name of the MongoDB database accessed.
  displayName: MongoDB Database Name
  name: MONGODB_DATABASE
  required: true
  value: sampledb
- description: Password for the database admin user.
  displayName: MongoDB Admin Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MONGODB_ADMIN_PASSWORD
  required: true